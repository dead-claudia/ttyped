// Adapted from https://gist.github.com/mathiasbynens/6334847

"use strict"

var fs = require("fs")
var path = require("path")
var regenerate = require("regenerate")

// Set up a shorthand function to import Unicode data.
function get(what) {
    return require("unicode-8.0.0/" + what + "/code-points")
}

// Get the Unicode categories needed to construct the ES5 regex.
var Lu = get("categories/Lu")
var Ll = get("categories/Ll")
var Lt = get("categories/Lt")
var Lm = get("categories/Lm")
var Lo = get("categories/Lo")
var Nl = get("categories/Nl")
var Mn = get("categories/Mn")
var Mc = get("categories/Mc")
var Nd = get("categories/Nd")
var Pc = get("categories/Pc")

// Get the Unicode properties needed to construct the ES6 regex.
var IDStart = get("properties/ID_Start")
var IDContinue = get("properties/ID_Continue")
var OtherIDStart = get("properties/Other_ID_Start")

// https://mathiasbynens.be/notes/javascript-identifiers#valid-identifier-names
var es5IdentifierStart = regenerate("$", "_")
    .add(Lu, Ll, Lt, Lm, Lo, Nl)
    .removeRange(0x010000, 0x10FFFF) // remove astral symbols

var es5IdentifierPart = es5IdentifierStart.clone()
    .add("\u200C", "\u200D", Mn, Mc, Nd, Pc)
    .removeRange(0x010000, 0x10FFFF) // remove astral symbols

var es5Reserved = [
    // https://mathiasbynens.be/notes/reserved-keywords#ecmascript-5
    "do", "if", "in", "for", "let", "new", "try", "var", "case", "else",
    "enum", "eval", "null", "this", "true", "void", "with", "break", "catch",
    "class", "const", "false", "super", "throw", "while", "yield", "delete",
    "export", "import", "public", "return", "static", "switch", "typeof",
    "default", "extends", "finally", "package", "private", "continue",
    "debugger", "function", "arguments", "interface", "protected",
    "implements", "instanceof",
    // These aren't strictly reserved words, but they kind of behave as if they
    // were.
    "NaN", "Infinity", "undefined",
]

/* eslint-disable max-len */
// http://ecma-international.org/ecma-262/6.0/#sec-identifier-names-static-semantics-early-errors
// http://unicode.org/reports/tr31/#Default_Identifier_Syntax
// https://bugs.ecmascript.org/show_bug.cgi?id=2717#c0
/* eslint-enable max-len */

// Note: this already includes `Other_ID_Start`. http://git.io/wRCAfQ
var es6IdentifierStart = regenerate(IDStart, "$", "_")

// Note: `ID_Continue` already includes `Other_ID_Continue`.
// http://git.io/wRCAfQ
var es6IdentifierPart = regenerate(IDContinue)
    .add(OtherIDStart)
    .add("$", "_", "\u200C", "\u200D")

var es6Reserved = [
    // https://mathiasbynens.be/notes/reserved-keywords#ecmascript-6
    "do", "if", "in", "for", "let", "new", "try", "var", "case", "else",
    "enum", "eval", "null", "this", "true", "void", "with", "await", "break",
    "catch", "class", "const", "false", "super", "throw", "while", "yield",
    "delete", "export", "import", "public", "return", "static", "switch",
    "typeof", "default", "extends", "finally", "package", "private",
    "continue", "debugger", "function", "arguments", "interface", "protected",
    "implements", "instanceof",
    // These aren't strictly reserved words, but they kind of behave as if they
    // were.
    "NaN", "Infinity", "undefined",
]

var reserved = Array.from(new Set(es5Reserved.concat(es6Reserved)))

var identifierStart = es5IdentifierStart.intersection(es6IdentifierStart)
var identifierPart = es5IdentifierPart.intersection(es6IdentifierPart)

var file = path.resolve(__dirname, "../src/closure/identifier-regexp.js")
var out = new console.Console(fs.createWriteStream(file))

// Write the header
out.log("/**")
out.log(" * Tests for valid ES5 identifiers according to Unicode 8.0.0:")
out.log(" * https://gist.github.com/mathiasbynens/6334847")
out.log(" * Please excuse the wall of text.")
out.log(" *")
out.log(" * Also, note that this is autogenerated from")
out.log(" * scripts/generate-identifier-regexp.js")
out.log(" */")
out.log("/* eslint-disable max-len */")
out.log("export default /^(?!(?:" + reserved.join("|") + ")$)(?:" +
    identifierStart + ")(?:" + identifierPart + ")*$/")
